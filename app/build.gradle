apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-kapt'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion rootProject.ext.compile_sdk
    buildToolsVersion rootProject.ext.build_tools

    defaultConfig {
        applicationId rootProject.ext.application_id
        minSdkVersion rootProject.ext.min_sdk
        targetSdkVersion rootProject.ext.target_sdk
        versionCode rootProject.ext.version_code
        versionName rootProject.ext.version_name
        testInstrumentationRunner rootProject.ext.test_runner
    }

    kapt {
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage'            //Some libraries have issues with this.
        disable 'OldTargetApi'
        //Lint gives this warning but SDK 20 would be Android L Beta.
        disable 'IconDensities'             //For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder'  //For testing purpose. This is safe to remove.
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        main.java.srcDirs += [file("$buildDir/generated/source/kapt/main")]
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'
    }
}

dependencies {
    //Compile time dependencies
    kapt "android.arch.lifecycle:compiler:$archComponents_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"
    kapt "android.arch.persistence.room:compiler:$room_version"
    compileOnly "javax.annotation:jsr250-api:$javaxAnnotations_version"
    compileOnly "javax.inject:javax.inject:$javaxInject_version"

    //Application dependencies
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines_version"
    implementation "com.android.support:appcompat-v7:$appCompat_version"
    implementation "com.android.support.constraint:constraint-layout:$constraintLayout_version"
    implementation "android.arch.lifecycle:extensions:$archComponents_version"
    implementation "com.android.support:cardview-v7:$appCompat_version"
    implementation "com.android.support:recyclerview-v7:$appCompat_version"
    implementation "com.android.support:design:$appCompat_version"
    implementation "com.android.support:support-annotations:$appCompat_version"
    implementation "com.github.bumptech.glide:glide:$glide_version"
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$retrofit_coroutines_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_logging_interceptor_version"
    implementation "com.github.tientun:retrofit-mock-response:$retrofit_mock_response"
    implementation "com.jakewharton.timber:timber:$timber_version"
    implementation "android.arch.persistence.room:runtime:$room_version"

    //Unit/Integration tests dependencies
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "org.robolectric:robolectric:$robolectric_version"
    testImplementation "junit:junit:$junit_version"
    testImplementation "com.nhaarman:mockito-kotlin:$mockito_version"
    testImplementation "org.amshove.kluent:kluent:$kluent_version"

    //Acceptance tests dependencies
    androidTestImplementation "com.android.support.test:runner:$runner_version"
    androidTestImplementation "com.android.support.test:rules:$runner_version"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espresso_version"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$espresso_version"
    androidTestImplementation "com.android.support:support-annotations:$appCompat_version"

    //Development dependencies
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
}

kapt {
    generateStubs = true
}

kotlin {
    experimental {
        coroutines "enable"
    }
}
